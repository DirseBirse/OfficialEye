# This is the ID of the template. It is needed to identify this template in the API and must be alphanumeric and unique.
id: "driver_license_ru"
# The name of the template, as should be displayed to the user
name: "Driver License RU"
# This is the path to the example document you want to use as a base for the template.
# The path can be absolute or relative. If it is relative, then it will be resolved relative to the location of the current file.
source: "../template_images/driver_license_ru.jpg"
# A list of keypoints located in the template source image specified above.
# A keypoint is a rectangular region that should be present in all documents of this kind, and that
# should be used to find correspondences between the position of the given image and the positions in the template source image.
keypoints:
  rus_symbol:
    x: 276
    y: 66
    w: 375
    h: 219
    matches:
      min: 2
      max: 40
  title:
    x: 906
    y: 111
    w: 1584
    h: 140
    matches:
      min: 5
      max: 75
  heading_bar:
    x: 882
    y: 309
    w: 192
    h: 1221
    matches:
      min: 0
      max: 40
  heading_4b:
    x: 1605
    y: 864
    w: 135
    h: 99
    matches:
      min: 0
      max: 10
  heading_67:
    x: 117
    y: 1326
    w: 102
    h: 213
    matches:
      min: 0
      max: 15
# Matching configuration
# Matching is the process of finding equal patterns in the given image and the template source image,
# thus establishing correspondences between positions.
# Although better matchings will of course contribute to the stability of the document analysis, it is
# completely fine for a matching algorithm to err in some cases.
matching:
  # Here you can speficy the name of the matching engine that should be used to find correspondences between
  # positions of the given image and those of the template source image provided above.
  # Available engines: sift_flann
  engine: sift_flann
  # Engine-specific configuration
  config:
    # Configuration specific to the `sift_flann` matching engine.
    sift_flann:
      sensitivity: 0.7
# Supervision configuration
# Supervision is the process of unifying the given document image with the template source,
# based on the (partially unreliable) information received from the matching algorithm
supervision:
  # Here you can speficy the name of the supervision engine that should be used to find correspondences between
  # positions of the given image and those of the template source image provided above.
  # Available engines: orthogonal_regression, least_squares_regression, combinatorial
  engine: combinatorial
  config:
    # Here you can speficy engine-specific configurations
    combinatorial:
      # A coefficient between 0 and 1, representing the fraction of matches that should be chosen as the basis for inferring the way the document
      # is positioned in the image provided. The larger the coefficient, the more reliable the superivison result will be.
      # However, increasing this value will also increase the risk of wrongfully not detecting a document at all.
      # If your matching engine produces a lot of false positives, it is recommended to keep this value low, and vice versa.
      min_match_factor: 0.1
      # The combinatorial engine uses an affine linear transformation model to represent the way the document is located in the image provided.
      # It then chooses at least `min_match_factor` * (total amount of matches) matches that cause the data to fit the model, up to the error
      # specified here, measured in pixels along one of the axis. Thus, the lower this value is, the higher will be the quality of the
      # combinatorial supervision engine's output. On the other hand, a very small value may increase
      # the risk of wrongfully not detecting a document at all.
      # Recommended value: between 2 and 10 pixels
      max_transformation_error: 5

  # Since the supervision engine may produce multiple results.
  # This option allows you to specify the strategy that should be used to choose a final result.
  # Available strategies: first, best_mse, best_score
  # The `first` strategy simply returns the first result produced
  # The `random` strategy chooses a random result produced
  # The `best_mse` strategy finds the result which has the lowest mean squared error when translating template points to target points
  # The `best_score` strategy returns the result with the highest score (what `score` represents depends on the supervision engine)
  result: best_score
# A list of features located in the template source image specified above.
# A feature is a rectangular region containing any information of interest, such as text.
# In other words, the corresponding regions in the target image will be found during document analysis.
features:
  last_name_ru:
    x: 1080
    y: 321
    w: 1200
    h: 90
    meta:
      type: text
  last_name_en:
    x: 1080
    y: 400
    w: 1200
    h: 70
    meta:
      type: text
  name_ru:
    x: 1080
    y: 470
    w: 1200
    h: 90
    meta:
      type: text
  name_en:
    x: 1080
    y: 550
    w: 1200
    h: 70
    meta:
      type: text
  birthday:
    x: 1080
    y: 620
    w: 1200
    h: 90
    meta:
      type: text
  place_of_birth_ru:
    x: 1080
    y: 700
    w: 1200
    h: 80
    meta:
      type: text
  place_of_birth_en:
    x: 1080
    y: 780
    w: 1200
    h: 70
    meta:
      type: text
  issue_date:
    x: 1080
    y: 860
    w: 500
    h: 90
    meta:
      type: text
  expiry_date:
    x: 1750
    y: 860
    w: 500
    h: 90
    meta:
      type: text
  issue_authority_ru:
    x: 1080
    y: 950
    w: 1200
    h: 80
    meta:
      type: text
  issue_authority_en:
    x: 1080
    y: 1020
    w: 1200
    h: 80
    meta:
      type: text
  identifier:
    x: 1080
    y: 1100
    w: 1200
    h: 100
    meta:
      type: text
  issue_place_ru:
    x: 1080
    y: 1190
    w: 1200
    h: 80
    meta:
      type: text
  issue_place_en:
    x: 1080
    y: 1260
    w: 1200
    h: 80
    meta:
      type: text
  face:
    x: 174
    y: 384
    w: 627
    h: 921